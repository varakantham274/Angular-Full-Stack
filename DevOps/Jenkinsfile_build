pipeline {
    agent {
        label 'slave'
    }

    options { 
        buildDiscarder(logRotator(numToKeepStr: '10'))
        ansiColor('xterm')
        timestamps ()
    } 

    environment {
        ecrrepo = 'pet-system'
        ecrurl = "https://827857156945.dkr.ecr.ca-central-1.amazonaws.com/pet-system"
        ecrbaseurl = "827857156945.dkr.ecr.ca-central-1.amazonaws.com/"
        ecrcredentials = "ecr:ca-central-1:master_user"
        dockerImage = ''
    } 

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
                }
            }

        stage('Checkout') {
            steps {
                script {
                    def scmVars = checkout([$class: 'GitSCM',
                    branches: [[name: '*/master']], 
                    extensions: [], 
                    userRemoteConfigs: [[
                    credentialsId: 'github_access', 
                    url: 'https://github.com/varakantham274/Angular-Full-Stack.git'
                    ]]
                ])
                env.COMMIT_ID = scmVars.GIT_COMMIT.substring(0, 7)
                echo "${env.COMMIT_ID}"
                }
            }
        }

        stage('Set variables') {
            steps {
                script {
                    env.image_tag="${ecrbaseurl}${ecrrepo}:${COMMIT_ID}"
                }
                sh '''
                echo "commit: ${COMMIT_ID}"
                echo "image_tag: ${image_tag}"
                '''
                }
            }

        stage('Docker Build') {
            steps {
                script {
                    dockerImage = docker.build image_tag
                    }
                }
            }

        stage('push image') {
            steps {
                script {
                    docker.withRegistry(ecrurl, ecrcredentials) 
                    {     
                        dockerImage.push()
                    }
                }
            }
        }

        stage('Remove image') {
            steps {
                sh '''
                    docker rmi ${image_tag}
                '''
            }
        }
    }
}